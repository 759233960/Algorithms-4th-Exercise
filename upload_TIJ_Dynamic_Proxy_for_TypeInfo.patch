Index: src/ThinkingInJava/typeinfo/SimpleDynamicProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ThinkingInJava/typeinfo/SimpleDynamicProxy.java	(date 1538818388443)
+++ src/ThinkingInJava/typeinfo/SimpleDynamicProxy.java	(date 1538818388443)
@@ -0,0 +1,43 @@
+package ThinkingInJava.typeinfo;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+
+class DynamicProxyHandler implements InvocationHandler {
+    private Object proxied;
+
+    public DynamicProxyHandler(Object proxied) {
+        this.proxied = proxied;
+    }
+
+    @Override
+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+        System.out.println("***** proxy: " + proxy.getClass() + ", method: " + method + ", args: "
+                + args + " *****");
+        if (args != null)
+            for (Object arg : args)
+                System.out.println(" " + arg);
+        return method.invoke(proxied, args);
+    }
+}
+
+public class SimpleDynamicProxy {
+
+    public static void consumer(Interface iface) {
+        iface.doSomething();
+        iface.somethingElse("boboka");
+    }
+
+    public static void main(String[] args) {
+        Interface realObject = new RealObject();
+        consumer(realObject);
+
+        Interface proxy = (Interface) Proxy.newProxyInstance(
+                realObject.getClass().getClassLoader(),
+                realObject.getClass().getInterfaces(),
+                new DynamicProxyHandler(realObject)
+        );
+        consumer(proxy);
+    }
+}
Index: src/ThinkingInJava/typeinfo/SimpleProxyDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ThinkingInJava/typeinfo/SimpleProxyDemo.java	(date 1538817563745)
+++ src/ThinkingInJava/typeinfo/SimpleProxyDemo.java	(date 1538817563745)
@@ -0,0 +1,53 @@
+package ThinkingInJava.typeinfo;
+
+interface Interface {
+    void doSomething();
+
+    void somethingElse(String arg);
+}
+
+class RealObject implements Interface {
+
+    @Override
+    public void doSomething() {
+        System.out.println("doSomething");
+    }
+
+    @Override
+    public void somethingElse(String arg) {
+        System.out.println("Something else: " + arg);
+    }
+}
+
+class SimpleProxy implements Interface {
+
+    private Interface proxied;
+
+    public SimpleProxy(Interface proxied) {
+        this.proxied = proxied;
+    }
+
+    @Override
+    public void doSomething() {
+        System.out.println("SimpleProxy doSomething");
+        proxied.doSomething();
+    }
+
+    @Override
+    public void somethingElse(String arg) {
+        System.out.println("SimpleProxy somethingElse: "+arg);
+        proxied.somethingElse(arg);
+    }
+}
+
+public class SimpleProxyDemo {
+    public static void consumer(Interface iface){
+        iface.doSomething();
+        iface.somethingElse("boboka");
+    }
+
+    public static void main(String[] args) {
+        consumer(new RealObject());
+        consumer(new SimpleProxy(new RealObject()));
+    }
+}
Index: src/ThinkingInJava/typeinfo/SelectingMethods.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/ThinkingInJava/typeinfo/SelectingMethods.java	(date 1538818942547)
+++ src/ThinkingInJava/typeinfo/SelectingMethods.java	(date 1538818942547)
@@ -0,0 +1,77 @@
+package ThinkingInJava.typeinfo;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+
+interface SomeMethods {
+    void boring1();
+
+    void boring2();
+
+    void interesting(String arg);
+
+    void boring3();
+
+    void interesting();
+}
+
+class MethodSelector implements InvocationHandler {
+
+    private Object proxied;
+
+
+    public MethodSelector(Object proxied) {
+        this.proxied = proxied;
+    }
+
+    @Override
+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+        if (method.getName().equals("interesting"))
+            System.out.println("Proxy detected the interesting method");
+        return method.invoke(proxied, args);
+    }
+}
+
+class Implementation implements SomeMethods {
+
+    @Override
+    public void boring1() {
+        System.out.println("boring 1");
+    }
+
+    @Override
+    public void boring2() {
+        System.out.println("boring 2");
+    }
+
+    @Override
+    public void interesting(String arg) {
+        System.out.println("interesting " + arg);
+    }
+
+    @Override
+    public void boring3() {
+        System.out.println("boring 3");
+    }
+
+    @Override
+    public void interesting() {
+        System.out.println("interesting!");
+    }
+}
+
+public class SelectingMethods {
+    public static void main(String[] args) {
+        SomeMethods proxy = (SomeMethods) Proxy.newProxyInstance(
+                SomeMethods.class.getClassLoader(),
+                new Class[]{SomeMethods.class},
+                new MethodSelector(new Implementation())
+        );
+        proxy.boring1();
+        proxy.boring2();
+        proxy.boring3();
+        proxy.interesting("boboka");
+        proxy.interesting();
+    }
+}
